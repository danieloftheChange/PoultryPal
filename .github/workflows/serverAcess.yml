# .github/workflows/test-server-access.yml
name: Test Server Access

# Trigger this workflow manually or on push to test branch
on:
  workflow_dispatch:  # Manual trigger
  push:
    branches: [ test, main ]  # Auto trigger on push to these branches
  pull_request:
    branches: [ main ]

jobs:
  test-server-connection:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Test SSH Connection to Server
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT || 22 }}  # Default to port 22 if not specified
        timeout: 30s
        script: |
          echo "Successfully connected to server!"
          echo "================================="
          
          # Display server information
          echo "Current date and time:"
          date
          echo ""
          
          echo "Server details:"
          echo "Hostname: $(hostname)"
          echo "OS: $(cat /etc/os-release | grep PRETTY_NAME | cut -d'"' -f2)"
          echo "Kernel: $(uname -r)"
          echo "Architecture: $(uname -m)"
          echo ""
          
          echo "Disk usage:"
          df -h / | tail -1 | awk '{print "Used: "$3" | Available: "$4" | Usage: "$5}'
          echo ""
          
          echo "Memory usage:"
          free -h | grep Mem | awk '{print "Total: "$2" | Used: "$3" | Available: "$7}'
          echo ""
          
          echo "System uptime:"
          uptime -p
          echo ""
          
          echo "Current user and working directory:"
          echo "User: $(whoami)"
          echo "Home: $HOME"
          echo "Current directory: $(pwd)"
          echo ""
          
          echo "Network connectivity test:"
          if ping -c 1 google.com > /dev/null 2>&1; then
            echo "Internet connection: Available"
          else
            echo "Internet connection: Not available"
          fi
          echo ""
          
          echo "Directory permissions test:"
          if [ -w "$HOME" ]; then
            echo "Home directory: Writable"
          else
            echo "Home directory: Not writable"
          fi
          
          if [ -w "/var/www/html" ]; then
            echo "/var/www/html: Writable"
          elif [ -d "/var/www/html" ]; then
            echo "/var/www/html: Exists but not writable"
          else
            echo "/var/www/html: Does not exist"
          fi
          echo ""
          
          echo "Available tools check:"
          tools=("git" "node" "npm" "python3" "pip3" "docker" "nginx" "apache2")
          for tool in "${tools[@]}"; do
            if command -v "$tool" > /dev/null 2>&1; then
              version=$(command -v "$tool" > /dev/null && "$tool" --version 2>/dev/null | head -1 || echo "version unknown")
              echo "$tool: Available ($version)"
            else
              echo "$tool: Not available"
            fi
          done
          echo ""
          
          echo "Server access test completed successfully!"
          echo "================================="

  test-file-operations:
    runs-on: ubuntu-latest
    needs: test-server-connection  # Run after connection test passes
    
    steps:
    - name: Test File Operations on Server
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT || 22 }}
        timeout: 30s
        script: |
          echo "Testing file operations..."
          echo "================================="
          
          # Create a test directory
          TEST_DIR="$HOME/github-actions-test"
          echo "Creating test directory: $TEST_DIR"
          mkdir -p "$TEST_DIR"
          cd "$TEST_DIR"
          
          # Create a test file
          echo "Creating test file..."
          echo "Test file created by GitHub Actions on $(date)" > test-file.txt
          
          # Test file permissions
          echo "Testing file operations..."
          if [ -f "test-file.txt" ]; then
            echo "File creation: Success"
            echo "File content:"
            cat test-file.txt
          else
            echo "File creation: Failed"
          fi
          
          # Test file modification
          echo "Testing file modification..."
          echo "Modified by GitHub Actions on $(date)" >> test-file.txt
          
          # Clean up test files
          echo "Cleaning up test files..."
          rm -f test-file.txt
          cd "$HOME"
          rmdir "$TEST_DIR" 2>/dev/null || echo "Directory not empty, leaving it"
          
          echo "File operations test completed!"
          echo "================================="

  test-git-operations:
    runs-on: ubuntu-latest
    needs: test-file-operations
    
    steps:
    - name: Test Git Operations on Server
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT || 22 }}
        timeout: 60s
        script: |
          echo "ðŸ”§ Testing Git operations..."
          echo "================================="
          
          # Test git availability
          if command -v git > /dev/null 2>&1; then
            echo "Git is available: $(git --version)"
          else
            echo "Git is not available"
            exit 1
          fi
          
          # Test GitHub SSH access
          echo "Testing GitHub SSH access..."
          if ssh -o StrictHostKeyChecking=no -T git@github.com 2>&1 | grep -q "successfully authenticated"; then
            echo "GitHub SSH access: Working"
          else
            echo "GitHub SSH access: May need setup (this is normal for first run)"
          fi
          
          # Test basic git config
          echo "Current git configuration:"
          echo "User name: $(git config --global user.name || echo 'Not set')"
          echo "User email: $(git config --global user.email || echo 'Not set')"
          
          echo "Git operations test completed!"
          echo "================================="
